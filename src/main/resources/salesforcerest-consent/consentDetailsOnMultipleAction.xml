<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (c) 2023, WSO2 LLC (http://www.wso2.com) All Rights Reserved.

   WSO2 LLC licenses this file to you under the Apache License,
   Version 2.0 (the "License"); you may not use this file except
   in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied. See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<template name="consentDetailsOnMultipleAction" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="listOfActions" description="Comma-separated list of proposed actions"/>
    <parameter name="listOfIds" description="Comma-separated list of IDs. The ID can be the record ID or the email address listed on the record."/>
    <parameter name="aggregatedConsent" description="Whether to enable or disable aggregated consent."/>
    <parameter name="datetime" description="The timestamp for which consent is determined."/>
    <parameter name="policy" description="The policy."/>
    <parameter name="purpose" description="The reason for contacting a customer."/>
    <parameter name="verbose" description="Whether to allow verbose non-verbose responses."/>
    <parameter name="responseVariable" description="The name of the variable to which the response should be stored."/>
    <parameter name="overwriteBody" description="Replace the Message Body in Message Context with the response of the operation."/>
    <sequence>
        <property name="queryParams" value=""/>
        <filter source="boolean($func:aggregatedConsent)" regex="true">
            <then>
                <property name="queryParams" expression="fn:concat($ctx:queryParams, '&amp;', 'aggregatedConsent=', $func:aggregatedConsent)"/>
            </then>
            <else/>
        </filter>
        <filter source="boolean($func:datetime)" regex="true">
            <then>
                <property name="queryParams" expression="fn:concat($ctx:queryParams, '&amp;', 'datetime=', $func:datetime)"/>
            </then>
            <else/>
        </filter>
        <filter source="boolean($func:policy)" regex="true">
            <then>
                <property name="queryParams" expression="fn:concat($ctx:queryParams, '&amp;', 'policy=', $func:policy)"/>
            </then>
            <else/>
        </filter>
        <filter source="boolean($func:purpose)" regex="true">
            <then>
                <property name="queryParams" expression="fn:concat($ctx:queryParams, '&amp;', 'purpose=', $func:purpose)"/>
            </then>
            <else/>
        </filter>
        <filter source="boolean($func:verbose)" regex="true">
            <then>
                <property name="queryParams" expression="fn:concat($ctx:queryParams, '&amp;', 'verbose=', $func:verbose)"/>
            </then>
            <else/>
        </filter>
        <filter source="boolean($ctx:queryParams)" regex="true">
            <then>
                <property name="uri.var.callEndpointUri" expression="fn:concat($ctx:uri.var.apiUrl, '/services/data/', $ctx:uri.var.apiVersion, '/consent/multiaction?actions=', $func:listOfActions, '&amp;', 'ids=', $func:listOfIds, $ctx:queryParams)"/>
            </then>
            <else>
                <property name="uri.var.callEndpointUri" expression="fn:concat($ctx:uri.var.apiUrl, '/services/data/', $ctx:uri.var.apiVersion, '/consent/multiaction?actions=', $func:listOfActions, '&amp;', 'ids=', $func:listOfIds)"/>
            </else>
        </filter>
        <property name="httpMethod" value="get"/>
        <salesforcerest.callWithRetry/>
    </sequence>
</template>
